// ekf.c

 #include "./inc/ekf.h"


void ekf_init(EKF* ekf, float wheelbase) {
    // State
    ekf->x[0]   = 0.0f;
    ekf->x[1]   = 0.0f;
    ekf->x[2]   = 0.0f;

    
    // Covariance P (3x3)
    ekf->P          = (Matrix){3, 3, ekf->P_data};
    memset(ekf->P_data, 0, sizeof(ekf->P_data));
    ekf->P_data[0]  = ekf->P_data[4] = ekf->P_data[8] = 1000.0f;

    
    // Process noise Q (3x3)
    ekf->Q          = (Matrix){3, 3, ekf->Q_data};
    memset(ekf->Q_data, 0, sizeof(ekf->Q_data));
    ekf->Q_data[0]  = 0.1f;
    ekf->Q_data[4]  = 0.1f;
    ekf->Q_data[8]  = 0.05f;

    
    // Measurement noise R (2x2)
    ekf->R = (Matrix){2, 2, ekf->R_data};
    memset(ekf->R_data, 0, sizeof(ekf->R_data));
    ekf->R_data[0] = ekf->R_data[3] = 1.0f;

    
    // Jacobian F (3x3)
    ekf->F = (Matrix){3, 3, ekf->F_data};
    
    
    // Measurement H (2x3)
    ekf->H = (Matrix){2, 3, ekf->H_data};
    const float H_init[6] = {1,0,0, 0,1,0};
    memcpy(ekf->H_data, H_init, sizeof(H_init));
    
    ekf->wheelbase = wheelbase;
}

void ekf_predict(EKF* ekf, float delta_left, float delta_right) {
    // Calculate motion parameters
    const float delta_s     = (delta_left + delta_right)/2.0f;
    const float delta_theta = (delta_right - delta_left)/ekf->wheelbase;
    const float theta_mid   = ekf->x[2] + delta_theta/2.0f;
    
    // Update state
    ekf->x[0] += delta_s * cosf(theta_mid);
    ekf->x[1] += delta_s * sinf(theta_mid);
    ekf->x[2] += delta_theta;
    
    // Jacobian F
    float* F = ekf->F_data;
    memset(F, 0, sizeof(ekf->F_data));
    F[0] = F[4] = F[8] = 1.0f;  // Diagonal
    F[2] = -delta_s * sinf(theta_mid);  // df0/dθ
    F[5] =  delta_s * cosf(theta_mid);   // df1/dθ
    
    // Temporary matrices
    float FP_data[9], FPF_T_data[9];
    MAT_VIEW(F_mat, 3, 3, F);
    MAT_VIEW(P_mat, 3, 3, ekf->P_data);
    MAT_VIEW(FP,    3, 3, FP_data);
    MAT_VIEW(FPF_T, 3, 3, FPF_T_data);
    
    // P = F * P * F^T + Q
    matrix_multiply(&F_mat, &P_mat, &FP);
    Matrix F_T;
    matrix_transpose(&F_mat, &F_T);
    matrix_multiply(&FP, &F_T, &FPF_T);
    matrix_add(&FPF_T, &ekf->Q, &P_mat);
}


void ekf_update(EKF* ekf, float gps_x, float gps_y) {
    // Temporary buffers
    float y_data[2], S_data[4], S_inv_data[4];
    float HP_data[6], HPH_T_data[4], PH_T_data[6], K_data[6];
    float KH_data[9], I_KH_data[9], new_P_data[9];
    
    // Matrix views
    MAT_VIEW(z, 2, 1, (float[]){gps_x, gps_y});
    MAT_VIEW(H, 2, 3, ekf->H_data);
    MAT_VIEW(P, 3, 3, ekf->P_data);
    MAT_VIEW(R, 2, 2, ekf->R_data);
    
    // Measurement prediction
    MAT_VIEW(x_vec, 3, 1, ekf->x);
    MAT_VIEW(Hx, 2, 1, y_data);  // Reuse y_data buffer
    matrix_multiply(&H, &x_vec, &Hx);
    
    // Innovation
    MAT_VIEW(y, 2, 1, y_data);
    y_data[0] = gps_x - Hx.data[0];
    y_data[1] = gps_y - Hx.data[1];
    
    // Innovation covariance
    MAT_VIEW(HP, 2, 3, HP_data);
    matrix_multiply(&H, &P, &HP);
    
    Matrix H_T;
    matrix_transpose(&H, &H_T);
    
    MAT_VIEW(HPH_T, 2, 2, HPH_T_data);
    matrix_multiply(&HP, &H_T, &HPH_T);
    matrix_add(&HPH_T, &R, &HPH_T);
    
    // Kalman gain
    MAT_VIEW(S, 2, 2, S_data);
    MAT_VIEW(S_inv, 2, 2, S_inv_data);
    memcpy(S_data, HPH_T_data, sizeof(S_data));
    if(!matrix_inverse_2x2(&S, &S_inv)) return;
    
    MAT_VIEW(PH_T, 3, 2, PH_T_data);
    matrix_multiply(&P, &H_T, &PH_T);
    
    MAT_VIEW(K, 3, 2, K_data);
    matrix_multiply(&PH_T, &S_inv, &K);
    
    // State update
    MAT_VIEW(Ky, 3, 1, y_data);  // Reuse y_data buffer
    matrix_multiply(&K, &y, &Ky);
    ekf->x[0] += Ky.data[0];
    ekf->x[1] += Ky.data[1];
    ekf->x[2] += Ky.data[2];
    
    // Covariance update
    MAT_VIEW(KH, 3, 3, KH_data);
    matrix_multiply(&K, &H, &KH);
    
    MAT_VIEW(I, 3, 3, I_KH_data);
    for(uint8_t i=0; i<9; i++) I_KH_data[i] = -KH_data[i];
    I_KH_data[0] += 1.0f;
    I_KH_data[4] += 1.0f;
    I_KH_data[8] += 1.0f;
    
    MAT_VIEW(new_P, 3, 3, new_P_data);
    matrix_multiply(&I, &P, &new_P);
    memcpy(ekf->P_data, new_P_data, sizeof(new_P_data));
}




void example_ekf() {

  EKF ekf;
  ekf_init(&ekf, 0.5f);  // 0.5m wheelbase

  while(1) {
    // Get encoder readings (example values)
    float dl = get_left_encoder();
    float dr = get_right_encoder();
    ekf_predict(&ekf, dl, dr);
    
    if (gps_available()) {
      float gx = get_gps_x();
      float gy = get_gps_y();
      ekf_update(&ekf, gx, gy);
    }
    
    
    // Use updated state
    printf("Pose: x=%.2f, y=%.2f, θ=%.2f\n", 
           ekf.x[0], ekf.x[1], ekf.x[2]);
  }
}
